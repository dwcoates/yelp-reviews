* Init
Necessary libraries
#+BEGIN_SRC R :session :exports none :results none
  library(ggplot2)
  library(data.table)
  library(dplyr)
  library(ascii)
  options(asciiType = "org")
#+END_SRC

Load up data and keep track of time. Time to go get a coffee...
#+BEGIN_SRC R :session :exports none :cache no
  read_table <- function(filename) {                                          
      table <- fread(filename)  # use fread to quickly read csv file
      # Make sure there aren't any unacceptable chracters in the column names
      names(table) <- make.names(tolower(names(table)), unique = TRUE)
      table
  }

  print("Loading reviews...")
  reviews_t = system.time(reviews <- read_table('./data/review.csv'))

  print("Loading tip...")
  tips_t = system.time(tips <- read_table("./data/tip.csv"))

  print("Loading business...")
  business_t = system.time(business <- read_table("./data/business.csv"))
  business <- rename(business, stars.avg = stars) # for pleasant merges with `reviews`

  print("Loading user...")
  users_t = system.time(users <- read_table("./data/user.csv"))

  print("Loading checkin...")
  checkins_t = system.time(checkins <- read_table("./data/checkin.csv"))
#+END_SRC

#+RESULTS[27cd5d8ead7b3d93ec0d42a22a704adb38c13ac6]:

#+BEGIN_SRC R :session :exports results :results org
  total_load_time <- reviews_t + tips_t + business_t + users_t + checkins_t
  sprintf("Time to load CSV data into data.frames: %.2f minutes", total_load_time["elapsed"]/60.0)
#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
Time to load CSV data into data.frames: 0.19 minutes
#+END_SRC
* Introduction
* Methodology
* Preprocessing
Grab the zip codes from the 'full address' data:
** ZIP codes
#+BEGIN_SRC R :session :exports none :results none
  grab_zip <- function(address) {
      as.numeric(substr(address,
                        nchar(address, keepNA = TRUE) - 4,
                        nchar(address, keepNA = TRUE)))
  }

  zips = lapply(business$full_address, grab_zip)

  business <- mutate(business, zip_codes = zips)
#+END_SRC
How many ZIPs did we get? Dang, turns out that the about 1/8 of the addresses
did not contain zipcodes we can grab.
#+BEGIN_SRC R :session :exports none :results org
percent_null_zips <- length(zips[is.na(zips)])/length(zips)*100

sprintf("%.2f%% of restaurants have undecipherable zip codes", percent_null_zips)
#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
12.95% of restaurants have undecipherable zip codes
#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
12.95% of restaurants have undecipherable zip codes
#+END_SRC

#+BEGIN_SRC org
12.95% of restaurants have undecipherable zip codes
#+END_SRC
Luckily yelp maintains longitude/latitude coordinates of each business for
google maps integration, which we can affirm with the following query:
#+BEGIN_SRC R :session :exports both :results org
   longs <- grep('[[:digit:]]+.[[:digit:]]*', business$longitude)
   lats <- grep('[[:digit:]]+.[[:digit:]]*', business$latitude)
   stopifnot(length(longs) == length(lats),
             length(longs) == length(business$longitude))
   print("Done.")
#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
Done.
#+END_SRC
However, reverse geocoding, the process of converting geographic coordinates to
zip codes or the like, is expensive and time consuming. Instead, we can get away
with just looking at the price range states for individual restaurants, which is
much easier. It may be interesting to at some point put in the work to produce the 
zip codes.
* Reviews
** Basic stuff
#+BEGIN_SRC R :session :exports results :results org
  sprintf("Average rating across all reviews: %.3f", mean(reviews$stars))
#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
Average rating across all reviews: 3.764
#+END_SRC
** Distribution of scores by pricing 

#+BEGIN_SRC R :session :exports results :results none
  bus <- business[,c('price.range', 'stars.avg', 'business_id', 'review_count')]
#+END_SRC

#+BEGIN_SRC R :session :exports code :results none :cache no
  bus_reviews <- merge(na.omit(bus), reviews, by = 'business_id')
#+END_SRC

#+BEGIN_SRC R :session :exports code :results org :cache no
  print(ascii(aggregate(bus_reviews, 
                        by = list(bus_reviews$price.range),
                        FUN = var)))
#+END_SRC

#+RESULTS[df58e5b91980b445999fd6612031ba52aeea7157]:
#+BEGIN_SRC org
#+END_SRC

#+BEGIN_SRC R :session :exports code :results output org 
  star_variance <- merge(aggregate(stars ~ business_id,
                                   data = reviews, FUN = var),
                         na.omit(bus),
                         by = 'business_id')
#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
#+END_SRC

#+BEGIN_SRC R :session :exports both :results none
# review counts for businesses with and without listed price range
mean_no_pr_rev_count <- mean(bus[is.na(bus$price.range)]$review_count)
mean_pr_rev_count <- mean(bus[!is.na(bus$price.range)]$review_count)
#+END_SRC
** 
